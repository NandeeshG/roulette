Requirements:
1. To simulate roulette wheel rolling. The wheel will have 36 numbers.
2. Allow one or more users to place bets on the stopped wheel simultaneously.
3. Log events with the logging entitiy name

Entities:
1. wheel
    a. 1 to 36 numbers. Use PRN generator for selecting next number.
    b. Moves b/w rolling, accepting_bets, distributing_money phases at fix intervals:
        i. Rolling - takes 8 seconds
        ii. Betting - takes 15 seconds
        iii. Dispensing - takes 7 seconds
    c. Allows up to 5 users to join the table and place bets.
        i. Users can enter the table any time they want. They can leave only when no bet is placed by them.
    d. For now allows only straight up bets but we can allow more in future.
    
2. user
    a. For now can take input from cmd line, but should be input agnostic.
    b. Takes decision when to enter the table or exit.
    c. Manages own money and places bets.
    d. Reads events from the wheel and decides what to do when
        
3. logger
    a. Prints the timestamp, entity name, level, message
    b. Prints on stdout for now, but ideally should be able to receive the stream to
       print in constructor to change to filesystem logging easily

Design: modules
1. RouletteWheel
2. Gambler
3. Logger
4. PubSub

LLD: public interfaces
1. RouletteWheel: inherits from PubSub::Publisher
    Once object is constructed and a thread is started with the wheel going in cycle.
    The wheel stops only on object destruction.
    The main thread is free to allow handling pub-sub and place-bets request.
    Every event sent shall also have a timestamp telling till what time it will be in that state.
2. Gambler: inherits from PubSub::Subscriber
    Once object is constructed, it waits for subscribing to some wheel.
    Only one wheel can be subscribed at a time.
    Once subscribed to wheel it prompts user to place bet with a visible timer as provided by the wheel.
3. Logger:
    While constructor, takes the class name and stores it in pvt member.
    Exposes different functions as per the levels.
4. PubSub: 
    header only file that defines the pub-sub methods to implement.
